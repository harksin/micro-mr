package µ.mr.poc.api

import better.files.File
import µ.mr.poc.helper.FilesUtils

/** micro MR  "Simple" mode provides 2 things :
  * 1/  it forces Raw and In type as String, useful to read text.
  * 2 / it provides Src and Sink to read files/directory
  *
  * SimpleMr should be used for reading text files from a directory
  *
  * @tparam K   Key generated by mapper
  * @tparam V   Value generated by mapper
  * @tparam Out Values produced by reducer
  */
trait SimpleMr[K, V, Out] extends µMr[String, String, K, V, Out] {

  override def parseFunc(rawLine: String): String = identity(rawLine)

  def mr(
      sourcePath: String,
      outputDir: String,
      num_mappers: Int = 10,
      num_reducers: Int = 2
  ): Unit = {

    FilesUtils.readFromPath(sourcePath) match {
      case Some(in) =>
        val outputfile: File = FilesUtils.outputFile(outputDir)

        val out: Sink = (kv: KeyValue[K, Out]) => {
          val x = outputfile.appendLine(s"${kv.key}, ${kv.value}")
        }

        µmr(in, out, num_mappers, num_reducers)

      case None =>
        logger.error("fail to read directory or file")
        System.exit(1)
    }

  }

}
